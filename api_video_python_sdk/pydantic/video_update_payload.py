# coding: utf-8

"""
    api.video

    api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.

    The version of the OpenAPI document: 1
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel

from api_video_python_sdk.pydantic.metadata import Metadata
from api_video_python_sdk.pydantic.video_update_payload_tags import VideoUpdatePayloadTags

class VideoUpdatePayload(BaseModel):
    tags: typing.Optional[VideoUpdatePayloadTags] = Field(None, alias='tags')

    # The title you want to use for your video.
    title: typing.Optional[str] = Field(None, alias='title')

    # A brief description of the video.
    description: typing.Optional[str] = Field(None, alias='description')

    # The unique ID for the player you want to associate with your video.
    player_id: typing.Optional[str] = Field(None, alias='playerId')

    # Whether the video is publicly available or not. False means it is set to private. Default is true. Tutorials on [private videos](https://api.video/blog/endpoints/private-videos/).
    public: typing.Optional[bool] = Field(None, alias='public')

    # Whether the video is a 360 degree or immersive video.
    panoramic: typing.Optional[bool] = Field(None, alias='panoramic')

    # Whether the player supports the mp4 format.
    mp4_support: typing.Optional[bool] = Field(None, alias='mp4Support')

    # A list (array) of dictionaries where each dictionary contains a key value pair that describes the video. As with tags, you must send the complete list of metadata you want as whatever you send here will overwrite the existing metadata for the video. [Dynamic Metadata](https://api.video/blog/endpoints/dynamic-metadata/) allows you to define a key that allows any value pair.
    metadata: typing.Optional[typing.List[Metadata]] = Field(None, alias='metadata')
    class Config:
        arbitrary_types_allowed = True
