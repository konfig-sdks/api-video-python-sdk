# coding: utf-8

"""
    api.video

    api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.

    The version of the OpenAPI document: 1
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from api_video_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from api_video_python_sdk.api_response import AsyncGeneratorResponse
from api_video_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from api_video_python_sdk import schemas  # noqa: F401

from api_video_python_sdk.model.bad_request import BadRequest as BadRequestSchema
from api_video_python_sdk.model.videos_list_response import VideosListResponse as VideosListResponseSchema

from api_video_python_sdk.type.videos_list_response import VideosListResponse
from api_video_python_sdk.type.bad_request import BadRequest

from ...api_client import Dictionary
from api_video_python_sdk.pydantic.bad_request import BadRequest as BadRequestPydantic
from api_video_python_sdk.pydantic.videos_list_response import VideosListResponse as VideosListResponsePydantic

from . import path

# Query params
TitleSchema = schemas.StrSchema


class TagsSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'TagsSchema':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


class MetadataSchema(
    schemas.DictSchema
):


    class MetaOapg:
        additional_properties = schemas.StrSchema
    
    def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, str, ],
    ) -> 'MetadataSchema':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )
DescriptionSchema = schemas.StrSchema
LiveStreamIdSchema = schemas.StrSchema


class SortBySchema(
    schemas.EnumBase,
    schemas.StrSchema
):


    class MetaOapg:
        enum_value_to_name = {
            "title": "TITLE",
            "createdAt": "CREATED_AT",
            "publishedAt": "PUBLISHED_AT",
            "updatedAt": "UPDATED_AT",
        }
    
    @schemas.classproperty
    def TITLE(cls):
        return cls("title")
    
    @schemas.classproperty
    def CREATED_AT(cls):
        return cls("createdAt")
    
    @schemas.classproperty
    def PUBLISHED_AT(cls):
        return cls("publishedAt")
    
    @schemas.classproperty
    def UPDATED_AT(cls):
        return cls("updatedAt")


class SortOrderSchema(
    schemas.EnumBase,
    schemas.StrSchema
):


    class MetaOapg:
        enum_value_to_name = {
            "asc": "ASC",
            "desc": "DESC",
        }
    
    @schemas.classproperty
    def ASC(cls):
        return cls("asc")
    
    @schemas.classproperty
    def DESC(cls):
        return cls("desc")
CurrentPageSchema = schemas.IntSchema
PageSizeSchema = schemas.IntSchema
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'title': typing.Union[TitleSchema, str, ],
        'tags[]': typing.Union[TagsSchema, list, tuple, ],
        'metadata': typing.Union[MetadataSchema, dict, frozendict.frozendict, ],
        'description': typing.Union[DescriptionSchema, str, ],
        'liveStreamId': typing.Union[LiveStreamIdSchema, str, ],
        'sortBy': typing.Union[SortBySchema, str, ],
        'sortOrder': typing.Union[SortOrderSchema, str, ],
        'currentPage': typing.Union[CurrentPageSchema, decimal.Decimal, int, ],
        'pageSize': typing.Union[PageSizeSchema, decimal.Decimal, int, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_title = api_client.QueryParameter(
    name="title",
    style=api_client.ParameterStyle.FORM,
    schema=TitleSchema,
    explode=True,
)
request_query_tags_ = api_client.QueryParameter(
    name="tags[]",
    style=api_client.ParameterStyle.FORM,
    schema=TagsSchema,
    explode=True,
)
request_query_metadata = api_client.QueryParameter(
    name="metadata",
    style=api_client.ParameterStyle.DEEP_OBJECT,
    schema=MetadataSchema,
    explode=True,
)
request_query_description = api_client.QueryParameter(
    name="description",
    style=api_client.ParameterStyle.FORM,
    schema=DescriptionSchema,
    explode=True,
)
request_query_live_stream_id = api_client.QueryParameter(
    name="liveStreamId",
    style=api_client.ParameterStyle.FORM,
    schema=LiveStreamIdSchema,
    explode=True,
)
request_query_sort_by = api_client.QueryParameter(
    name="sortBy",
    style=api_client.ParameterStyle.FORM,
    schema=SortBySchema,
    explode=True,
)
request_query_sort_order = api_client.QueryParameter(
    name="sortOrder",
    style=api_client.ParameterStyle.FORM,
    schema=SortOrderSchema,
    explode=True,
)
request_query_current_page = api_client.QueryParameter(
    name="currentPage",
    style=api_client.ParameterStyle.FORM,
    schema=CurrentPageSchema,
    explode=True,
)
request_query_page_size = api_client.QueryParameter(
    name="pageSize",
    style=api_client.ParameterStyle.FORM,
    schema=PageSizeSchema,
    explode=True,
)
_auth = [
    'apiKey',
]
SchemaFor200ResponseBodyApplicationJson = VideosListResponseSchema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: VideosListResponse


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: VideosListResponse


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)
SchemaFor400ResponseBodyApplicationJson = BadRequestSchema


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    body: BadRequest


@dataclass
class ApiResponseFor400Async(api_client.AsyncApiResponse):
    body: BadRequest


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
    response_cls_async=ApiResponseFor400Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor400ResponseBodyApplicationJson),
    },
)
_status_code_to_response = {
    '200': _response_for_200,
    '400': _response_for_400,
}
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):

    def _list_all_objects_mapped_args(
        self,
        title: typing.Optional[str] = None,
        tags_: typing.Optional[typing.List[str]] = None,
        metadata: typing.Optional[typing.Dict[str, str]] = None,
        description: typing.Optional[str] = None,
        live_stream_id: typing.Optional[str] = None,
        sort_by: typing.Optional[str] = None,
        sort_order: typing.Optional[str] = None,
        current_page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _query_params = {}
        if title is not None:
            _query_params["title"] = title
        if tags_ is not None:
            _query_params["tags[]"] = tags_
        if metadata is not None:
            _query_params["metadata"] = metadata
        if description is not None:
            _query_params["description"] = description
        if live_stream_id is not None:
            _query_params["liveStreamId"] = live_stream_id
        if sort_by is not None:
            _query_params["sortBy"] = sort_by
        if sort_order is not None:
            _query_params["sortOrder"] = sort_order
        if current_page is not None:
            _query_params["currentPage"] = current_page
        if page_size is not None:
            _query_params["pageSize"] = page_size
        args.query = _query_params
        return args

    async def _alist_all_objects_oapg(
        self,
            query_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        List all video objects
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_title,
            request_query_tags_,
            request_query_metadata,
            request_query_description,
            request_query_live_stream_id,
            request_query_sort_by,
            request_query_sort_order,
            request_query_current_page,
            request_query_page_size,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'get'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/videos',
            auth_settings=_auth,
            headers=_headers,
        )
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _list_all_objects_oapg(
        self,
            query_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        List all video objects
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_title,
            request_query_tags_,
            request_query_metadata,
            request_query_description,
            request_query_live_stream_id,
            request_query_sort_by,
            request_query_sort_order,
            request_query_current_page,
            request_query_page_size,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'get'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/videos',
            auth_settings=_auth,
            headers=_headers,
        )
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class ListAllObjectsRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def alist_all_objects(
        self,
        title: typing.Optional[str] = None,
        tags_: typing.Optional[typing.List[str]] = None,
        metadata: typing.Optional[typing.Dict[str, str]] = None,
        description: typing.Optional[str] = None,
        live_stream_id: typing.Optional[str] = None,
        sort_by: typing.Optional[str] = None,
        sort_order: typing.Optional[str] = None,
        current_page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._list_all_objects_mapped_args(
            title=title,
            tags_=tags_,
            metadata=metadata,
            description=description,
            live_stream_id=live_stream_id,
            sort_by=sort_by,
            sort_order=sort_order,
            current_page=current_page,
            page_size=page_size,
        )
        return await self._alist_all_objects_oapg(
            query_params=args.query,
            **kwargs,
        )
    
    def list_all_objects(
        self,
        title: typing.Optional[str] = None,
        tags_: typing.Optional[typing.List[str]] = None,
        metadata: typing.Optional[typing.Dict[str, str]] = None,
        description: typing.Optional[str] = None,
        live_stream_id: typing.Optional[str] = None,
        sort_by: typing.Optional[str] = None,
        sort_order: typing.Optional[str] = None,
        current_page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._list_all_objects_mapped_args(
            title=title,
            tags_=tags_,
            metadata=metadata,
            description=description,
            live_stream_id=live_stream_id,
            sort_by=sort_by,
            sort_order=sort_order,
            current_page=current_page,
            page_size=page_size,
        )
        return self._list_all_objects_oapg(
            query_params=args.query,
        )

class ListAllObjects(BaseApi):

    async def alist_all_objects(
        self,
        title: typing.Optional[str] = None,
        tags_: typing.Optional[typing.List[str]] = None,
        metadata: typing.Optional[typing.Dict[str, str]] = None,
        description: typing.Optional[str] = None,
        live_stream_id: typing.Optional[str] = None,
        sort_by: typing.Optional[str] = None,
        sort_order: typing.Optional[str] = None,
        current_page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        validate: bool = False,
        **kwargs,
    ) -> VideosListResponsePydantic:
        raw_response = await self.raw.alist_all_objects(
            title=title,
            tags_=tags_,
            metadata=metadata,
            description=description,
            live_stream_id=live_stream_id,
            sort_by=sort_by,
            sort_order=sort_order,
            current_page=current_page,
            page_size=page_size,
            **kwargs,
        )
        if validate:
            return VideosListResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(VideosListResponsePydantic, raw_response.body)
    
    
    def list_all_objects(
        self,
        title: typing.Optional[str] = None,
        tags_: typing.Optional[typing.List[str]] = None,
        metadata: typing.Optional[typing.Dict[str, str]] = None,
        description: typing.Optional[str] = None,
        live_stream_id: typing.Optional[str] = None,
        sort_by: typing.Optional[str] = None,
        sort_order: typing.Optional[str] = None,
        current_page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        validate: bool = False,
    ) -> VideosListResponsePydantic:
        raw_response = self.raw.list_all_objects(
            title=title,
            tags_=tags_,
            metadata=metadata,
            description=description,
            live_stream_id=live_stream_id,
            sort_by=sort_by,
            sort_order=sort_order,
            current_page=current_page,
            page_size=page_size,
        )
        if validate:
            return VideosListResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(VideosListResponsePydantic, raw_response.body)


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def aget(
        self,
        title: typing.Optional[str] = None,
        tags_: typing.Optional[typing.List[str]] = None,
        metadata: typing.Optional[typing.Dict[str, str]] = None,
        description: typing.Optional[str] = None,
        live_stream_id: typing.Optional[str] = None,
        sort_by: typing.Optional[str] = None,
        sort_order: typing.Optional[str] = None,
        current_page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._list_all_objects_mapped_args(
            title=title,
            tags_=tags_,
            metadata=metadata,
            description=description,
            live_stream_id=live_stream_id,
            sort_by=sort_by,
            sort_order=sort_order,
            current_page=current_page,
            page_size=page_size,
        )
        return await self._alist_all_objects_oapg(
            query_params=args.query,
            **kwargs,
        )
    
    def get(
        self,
        title: typing.Optional[str] = None,
        tags_: typing.Optional[typing.List[str]] = None,
        metadata: typing.Optional[typing.Dict[str, str]] = None,
        description: typing.Optional[str] = None,
        live_stream_id: typing.Optional[str] = None,
        sort_by: typing.Optional[str] = None,
        sort_order: typing.Optional[str] = None,
        current_page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._list_all_objects_mapped_args(
            title=title,
            tags_=tags_,
            metadata=metadata,
            description=description,
            live_stream_id=live_stream_id,
            sort_by=sort_by,
            sort_order=sort_order,
            current_page=current_page,
            page_size=page_size,
        )
        return self._list_all_objects_oapg(
            query_params=args.query,
        )

