# coding: utf-8

"""
    api.video

    api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.

    The version of the OpenAPI document: 1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from api_video_python_sdk import schemas  # noqa: F401


class Quality(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def HLS(cls):
                    return cls("hls")
                
                @schemas.classproperty
                def MP4(cls):
                    return cls("mp4")
            
            
            class quality(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def _240P(cls):
                    return cls("240p")
                
                @schemas.classproperty
                def _360P(cls):
                    return cls("360p")
                
                @schemas.classproperty
                def _480P(cls):
                    return cls("480p")
                
                @schemas.classproperty
                def _720P(cls):
                    return cls("720p")
                
                @schemas.classproperty
                def _1080P(cls):
                    return cls("1080p")
                
                @schemas.classproperty
                def _2160P(cls):
                    return cls("2160p")
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def WAITING(cls):
                    return cls("waiting")
                
                @schemas.classproperty
                def ENCODING(cls):
                    return cls("encoding")
                
                @schemas.classproperty
                def ENCODED(cls):
                    return cls("encoded")
                
                @schemas.classproperty
                def FAILED(cls):
                    return cls("failed")
            __annotations__ = {
                "type": type,
                "quality": quality,
                "status": status,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["quality"]) -> MetaOapg.properties.quality: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "quality", "status", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["quality"]) -> typing.Union[MetaOapg.properties.quality, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "quality", "status", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        quality: typing.Union[MetaOapg.properties.quality, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Quality':
        return super().__new__(
            cls,
            *args,
            type=type,
            quality=quality,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )
