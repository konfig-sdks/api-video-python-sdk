# coding: utf-8

"""
    api.video

    api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.

    The version of the OpenAPI document: 1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from api_video_python_sdk import schemas  # noqa: F401


class VideoAssets(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Collection of details about the video object that you can use to work with the video object.
    """


    class MetaOapg:
        
        class properties:
            hls = schemas.StrSchema
            iframe = schemas.StrSchema
            player = schemas.StrSchema
            thumbnail = schemas.StrSchema
            mp4 = schemas.StrSchema
            __annotations__ = {
                "hls": hls,
                "iframe": iframe,
                "player": player,
                "thumbnail": thumbnail,
                "mp4": mp4,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hls"]) -> MetaOapg.properties.hls: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["iframe"]) -> MetaOapg.properties.iframe: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["player"]) -> MetaOapg.properties.player: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["thumbnail"]) -> MetaOapg.properties.thumbnail: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mp4"]) -> MetaOapg.properties.mp4: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["hls", "iframe", "player", "thumbnail", "mp4", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hls"]) -> typing.Union[MetaOapg.properties.hls, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["iframe"]) -> typing.Union[MetaOapg.properties.iframe, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["player"]) -> typing.Union[MetaOapg.properties.player, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["thumbnail"]) -> typing.Union[MetaOapg.properties.thumbnail, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mp4"]) -> typing.Union[MetaOapg.properties.mp4, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["hls", "iframe", "player", "thumbnail", "mp4", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        hls: typing.Union[MetaOapg.properties.hls, str, schemas.Unset] = schemas.unset,
        iframe: typing.Union[MetaOapg.properties.iframe, str, schemas.Unset] = schemas.unset,
        player: typing.Union[MetaOapg.properties.player, str, schemas.Unset] = schemas.unset,
        thumbnail: typing.Union[MetaOapg.properties.thumbnail, str, schemas.Unset] = schemas.unset,
        mp4: typing.Union[MetaOapg.properties.mp4, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'VideoAssets':
        return super().__new__(
            cls,
            *args,
            hls=hls,
            iframe=iframe,
            player=player,
            thumbnail=thumbnail,
            mp4=mp4,
            _configuration=_configuration,
            **kwargs,
        )
