# coding: utf-8

"""
    api.video

    api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.

    The version of the OpenAPI document: 1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from api_video_python_sdk import schemas  # noqa: F401


class Pagination(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "links",
        }
        
        class properties:
            
            
            class links(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['PaginationLink']:
                        return PaginationLink
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['PaginationLink'], typing.List['PaginationLink']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'links':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'PaginationLink':
                    return super().__getitem__(i)
            itemsTotal = schemas.IntSchema
            pagesTotal = schemas.IntSchema
            pageSize = schemas.IntSchema
            currentPage = schemas.IntSchema
            currentPageItems = schemas.IntSchema
            __annotations__ = {
                "links": links,
                "itemsTotal": itemsTotal,
                "pagesTotal": pagesTotal,
                "pageSize": pageSize,
                "currentPage": currentPage,
                "currentPageItems": currentPageItems,
            }
    
    links: MetaOapg.properties.links
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["links"]) -> MetaOapg.properties.links: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["itemsTotal"]) -> MetaOapg.properties.itemsTotal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pagesTotal"]) -> MetaOapg.properties.pagesTotal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pageSize"]) -> MetaOapg.properties.pageSize: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currentPage"]) -> MetaOapg.properties.currentPage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currentPageItems"]) -> MetaOapg.properties.currentPageItems: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["links", "itemsTotal", "pagesTotal", "pageSize", "currentPage", "currentPageItems", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["links"]) -> MetaOapg.properties.links: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["itemsTotal"]) -> typing.Union[MetaOapg.properties.itemsTotal, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pagesTotal"]) -> typing.Union[MetaOapg.properties.pagesTotal, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pageSize"]) -> typing.Union[MetaOapg.properties.pageSize, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currentPage"]) -> typing.Union[MetaOapg.properties.currentPage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currentPageItems"]) -> typing.Union[MetaOapg.properties.currentPageItems, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["links", "itemsTotal", "pagesTotal", "pageSize", "currentPage", "currentPageItems", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        links: typing.Union[MetaOapg.properties.links, list, tuple, ],
        itemsTotal: typing.Union[MetaOapg.properties.itemsTotal, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        pagesTotal: typing.Union[MetaOapg.properties.pagesTotal, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        pageSize: typing.Union[MetaOapg.properties.pageSize, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        currentPage: typing.Union[MetaOapg.properties.currentPage, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        currentPageItems: typing.Union[MetaOapg.properties.currentPageItems, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Pagination':
        return super().__new__(
            cls,
            *args,
            links=links,
            itemsTotal=itemsTotal,
            pagesTotal=pagesTotal,
            pageSize=pageSize,
            currentPage=currentPage,
            currentPageItems=currentPageItems,
            _configuration=_configuration,
            **kwargs,
        )

from api_video_python_sdk.model.pagination_link import PaginationLink
