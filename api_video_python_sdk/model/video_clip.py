# coding: utf-8

"""
    api.video

    api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.

    The version of the OpenAPI document: 1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from api_video_python_sdk import schemas  # noqa: F401


class VideoClip(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Use this object to create a smaller clip from a video you upload. 
- You can only create video clips in the same request where you create the video container.
- You cannot update the starting or ending timestamps of a video clip after you created the video container.
- When you upload a video file into a container where you defined a starting and ending timestamp, the API trims the video according to those timestamps to create a clip.
    """


    class MetaOapg:
        
        class properties:
            
            
            class startTimecode(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^(?:\d{2,3}:[0-5]\d:[0-5]\d(?:\.\d{1,3}|\:\d{1,2})?|\d{1,7})$',
                    }]
            
            
            class endTimecode(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^(?:\d{2,3}:[0-5]\d:[0-5]\d(?:\.\d{1,3}|\:\d{1,2})?|\d{1,7})$',
                    }]
            __annotations__ = {
                "startTimecode": startTimecode,
                "endTimecode": endTimecode,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startTimecode"]) -> MetaOapg.properties.startTimecode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endTimecode"]) -> MetaOapg.properties.endTimecode: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["startTimecode", "endTimecode", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startTimecode"]) -> typing.Union[MetaOapg.properties.startTimecode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endTimecode"]) -> typing.Union[MetaOapg.properties.endTimecode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["startTimecode", "endTimecode", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        startTimecode: typing.Union[MetaOapg.properties.startTimecode, str, schemas.Unset] = schemas.unset,
        endTimecode: typing.Union[MetaOapg.properties.endTimecode, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'VideoClip':
        return super().__new__(
            cls,
            *args,
            startTimecode=startTimecode,
            endTimecode=endTimecode,
            _configuration=_configuration,
            **kwargs,
        )
